import React from 'react'
import { mount } from 'enzyme'
import { reduxForm, FieldArray } from 'redux-form/immutable'
import { Provider } from 'react-redux'

import locationsFixture from 'fixtures/fetch-locations.json'
import { Location } from 'models'
import createStore from 'store'

import Hours from '../index.js.hold'
import TimeSlotField, {
  timeSlotHandlers,
} from '../partials/TimeSlotField.js.hold'
import getCloseDay from '../utils/getCloseDay'

const mockLocation = new Location(locationsFixture.data[1])

const MockFormWrapper = reduxForm({ form: 'mockForm' })((props) => {
  return (
    <FieldArray
      name="hours"
      component={Hours}
      {...props}
      rerenderOnEveryChange
    />
  )
})

const buildMountedTestTarget = (props) => (
  <Provider store={createStore()}>
    <MockFormWrapper
      store={createStore()}
      initialValues={mockLocation.mapForReduxForm()}
      {...props}
    />
  </Provider>
)

describe('Hours', () => {
  it('renders without crashing', () => {
    mount(buildMountedTestTarget())
  })

  it('it should create empty fields where there are no set hours', () => {
    const wrapper = mount(buildMountedTestTarget())
    expect(wrapper.find('Hours')).toHaveLength(1)
  })

  // it('it should render a plus button for the first slot in split hours', () => {
  //   const wrapper = mount(buildMountedTestTarget())
  //   expect(wrapper.find('GoPlus')).toHaveLength(7)
  // })
})

describe('timeSlotHandlers', () => {
  it('should call getCloseDay', () => {
    const mockProps = {
      change: () => {},
      hoursFields: {
        get: () => {},
        getIn: () => {},
      },
      dayIndex: 0,
      fieldIndex: 0,
      fieldName: 'hours[0].hours[0]',
    }

    getCloseDay(mockProps.dayIndex, 1800, undefined)
  })
  it('should call getCloseDay and roll day to 0 if openTime >= closeTime and index === 6 ', () => {
    const mockProps = {
      change: () => {},
      hoursFields: {
        get: () => {},
        getIn: () => {},
      },
      dayIndex: 6,
      fieldIndex: 0,
      fieldName: 'hours[0].hours[0]',
    }

    getCloseDay(mockProps.dayIndex, 1800, 200)
  })
  it('should call getCloseDay and roll day to next day if openTime >= closeTime and index !== 6 ', () => {
    const mockProps = {
      change: () => {},
      hoursFields: {
        get: () => {},
        getIn: () => {},
      },
      dayIndex: 5,
      fieldIndex: 0,
      fieldName: 'hours[0].hours[0]',
    }

    getCloseDay(mockProps.dayIndex, 1800, 200)
  })
  // it('should call handleStartTimeFieldChange method', () => {
  //   const mockProps = {
  //     change: () => {},
  //     hoursFields: {
  //       get: () => {},
  //       getIn: () => {}
  //     },
  //     dayIndex: 0,
  //     fieldIndex: 0,
  //     fieldName: 'hours[0].hours[0]'
  //   }
  //
  //   const mockEvent = {
  //     0: 1800,
  //     preventDefault: () => {}
  //   }
  //
  //   timeSlotHandlers.handleStartTimeFieldChange(mockProps)(mockEvent, undefined)
  // })
  it('should call handleEndTimeFieldChange prop when clicked', () => {
    const handleEndTimeFieldChangeSpy = jest.fn()
    const wrapper = mount(
      <Provider store={createStore()}>
        <MockFormWrapper initialValues={mockLocation.mapForReduxForm()}>
          <TimeSlotField onChange={handleEndTimeFieldChangeSpy} />
        </MockFormWrapper>
      </Provider>
    )
    const timeField = wrapper.find('Field.__endTime__').at(0)
    timeField.simulate('click')
    //
    // const flatPickr = wrapper.find('.flatpickr-calendar')
    // flatPickr.simulate('click')
    // console.log(wrapper.debug())
  })
  it('should call handleParseTime method', () => {
    const mockProps = {
      change: () => {},
      hoursFields: {
        get: () => {},
        getIn: () => {},
      },
      dayIndex: 0,
      fieldIndex: 0,
      fieldName: 'hours[0].hours[0]',
    }
    mount(buildMountedTestTarget())
    timeSlotHandlers.handleParseTime(mockProps)([1800])
  })
})

describe('TimeSlotField', () => {
  it('should call handleAddSlotClick when GoPlus clicked', () => {
    const handleAddSlotClickSpy = jest.fn()
    const wrapper = mount(
      <Provider store={createStore()}>
        <MockFormWrapper initialValues={mockLocation.mapForReduxForm()}>
          <TimeSlotField handleAddSlotClick={handleAddSlotClickSpy} />
        </MockFormWrapper>
      </Provider>
    )
    const minusButton = wrapper.find('FlatButton.__addSlot__').at(0)
    minusButton.simulate('click')
  })
  it('should call handleRemoveSlotClick when GoMinus clicked', () => {
    const handleRemoveSlotClickSpy = jest.fn()
    const wrapper = mount(
      <Provider store={createStore()}>
        <MockFormWrapper initialValues={mockLocation.mapForReduxForm()}>
          <TimeSlotField handleRemoveSlotClick={handleRemoveSlotClickSpy} />
        </MockFormWrapper>
      </Provider>
    )
    const minusButton = wrapper.find('FlatButton.__removeSlot__').at(0)
    minusButton.simulate('click')
  })
  it('should calls handleParseTime', () => {
    const handleParseTimeSpy = jest.fn()
    mount(
      <Provider store={createStore()}>
        <MockFormWrapper initialValues={mockLocation.mapForReduxForm()}>
          <TimeSlotField handleParseTime={handleParseTimeSpy} />
        </MockFormWrapper>
      </Provider>
    )
  })
})
